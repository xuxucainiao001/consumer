#maven will change this variable
spring.profiles.active=@{profileActive}


server.port=@{app-port}
server.servlet.context-path=/
spring.application.name=@{app-name}

#tomcat
#最大并发数线程数
server.tomcat.max-threads=40
#初始化时创建的线程数
server.tomcat.min-SpareThreads=40
#接受和处理的最大连接数（线程池队列）
server.tomcat.max-connections=10000
#这个是linux的backlog，linux默认值为128，两者回取最小值。如果设置大与128，需要改linux /proc/sys/net/core/somaxconn 
server.tomcat.acceptCount=128

#jetty
server.jetty.max-http-post-size=-1
server.jetty.acceptors=1
server.jetty.selectors=4
server.jetty.max-threads=40
server.jetty.min-threads=40

#文件上传大小
spring.servlet.multipart.max-file-size=2MB
#数据请求包大小  
spring.servlet.multipart.max-request-size=2MB

#修改触发热启动
spring.devtools.restart.enabled=false

#spring cloud 注册自己到 nacos ，让zuul可以发现
spring.cloud.nacos.discovery.server-addr=@{nacos.address}
spring.cloud.nacos.discovery.namespace=@{nacos.namespace}
spring.cloud.nacos.discovery.group=nacos_group

#nacos 配置中心
spring.cloud.nacos.config.server-addr=@{nacos.address}
spring.cloud.nacos.config.namespace=@{nacos.namespace}
spring.cloud.nacos.config.file-extension=properties
spring.cloud.nacos.config.group=DEFAULT_GROUP


#sentinel限流配置在nacos
spring.cloud.sentinel.datasource.ds1.nacos.server-addr=@{nacos.address}
spring.cloud.sentinel.datasource.ds1.nacos.data-id=${spring.application.name}-sentinel-${spring.cloud.sentinel.datasource.ds1.nacos.rule-type}-${spring.profiles.active}
spring.cloud.sentinel.datasource.ds1.nacos.group-id=DEFAULT_GROUP
spring.cloud.sentinel.datasource.ds1.nacos.namespace=@{nacos.namespace}
spring.cloud.sentinel.datasource.ds1.nacos.data-type=json
#com.alibaba.cloud.sentinel.datasource.RuleType  限流、降级、热点、系统、授权等
spring.cloud.sentinel.datasource.ds1.nacos.rule-type=flow

#sentinel降级配置在nacos
spring.cloud.sentinel.datasource.ds2.nacos.server-addr=@{nacos.address}
spring.cloud.sentinel.datasource.ds2.nacos.data-id=${spring.application.name}-sentinel-${spring.cloud.sentinel.datasource.ds2.nacos.rule-type}-${spring.profiles.active}
spring.cloud.sentinel.datasource.ds2.nacos.group-id=DEFAULT_GROUP
spring.cloud.sentinel.datasource.ds2.nacos.namespace=@{nacos.namespace}
spring.cloud.sentinel.datasource.ds2.nacos.data-type=json
#com.alibaba.cloud.sentinel.datasource.RuleType  限流、降级、热点、系统、授权等
spring.cloud.sentinel.datasource.ds2.nacos.rule-type=degrade

#actuator
management.endpoints.web.exposure.include=*
#关闭过滤敏感信息
management.endpoints.health.sensitive=false
management.endpoint.health.show-details=always
management.endpoint.shutdown.enabled=true

#springboot admin
#spring.boot.admin.client.url=http://localhost:9999
#spring.boot.admin.client.username=admin
#spring.boot.admin.client.password=admin
#spring.boot.admin.client.instance.service-base-url=http://localhost:${server.port}
#spring.boot.admin.client.instance.name=${spring.application.name}

#mybatis
mybatis.type-aliases-package=cn.toseektech.consumer.entity
#mybatis xml
mybatis.mapper-locations=classpath:mappers/*.xml

#logback
logging.config=classpath:logback-spring.xml


#Feign配置
#开启 熔断
feign.hystrix.enabled=true
##替换掉JDK默认HttpURLConnection实现的okClient
feign.okhttp.enabled=true

#ribbon
#ribbon的超时时间要大于hystrix的超时时间, 否则 hystrix自定义的超时时间毫无意义
ribbon.ReadTimeout=10000
ribbon.ConnectTimeout=5000
#禁止重试
ribbon.OkToRetryOnAllOperations=false
#其他服务重试
ribbon.MaxAutoRetriesNextServer=0
#同一台实例的最大自动重试次数
ribbon.MaxAutoRetries=0
#开启Ribbon的饥饿加载模式 启动是创建httpClient,而不是第一次调用时创建
ribbon.eager-load.enabled=true

#Hystrix配置
#feign整合hystrix 光设置Hystrix 超时没用, 要配合ribbon超时 
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=15000
#此属性设置统计滚动窗口的持续时间（以毫秒为单位）
hystrix.command.default.metrics.rollingStats.timeInMilliseconds=10000
#熔断的阈值，如果滚动窗口的持续时间内服务报错满足10次，熔断器就会打开
hystrix.command.default.circuitBreaker.requestVolumeThreshold=10
#默认5S ， 等5S之后熔断器会处于半开状态，然后下一次请求的正确和错误讲决定熔断器是否真的关闭和是否继续打开
hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=5000


#pageHelper
pagehelper.helper-dialect=mysql

xxl.job.enable=true
### 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行"执行器心跳注册"和"任务结果回调"；为空则关闭自动注册；
xxl.job.admin.addresses=http://localhost:9091/xxl-job-admin
### 执行器通讯TOKEN [选填]：非空时启用；
#xxl.job.accessToken=
### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册
xxl.job.executor.appname=consumer
### 执行器注册 [选填]：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。
#xxl.job.executor.address=
### 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 "执行器注册" 和 "调度中心请求并触发任务"；
#xxl.job.executor.ip=
### 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；
xxl.job.executor.port=-1
### 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；
xxl.job.executor.logpath=/data/applogs/xxl-job/jobhandler
### 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；
xxl.job.executor.logretentiondays=30